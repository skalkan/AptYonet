{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/core/core.module.ts","webpack:///./src/app/core/ensureModuleLoadedOnceGuard.ts","webpack:///./src/app/core/services/data.service.ts","webpack:///./src/app/home/home.component.html","webpack:///./src/app/home/home.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nimport { HomeComponent } from './home/home.component';\n\nconst routes: Routes = [\n    { path: '', pathMatch: 'full', redirectTo: '/home' },\n    { path: 'home', component: HomeComponent },\n    { path: '**', redirectTo: '/home' } \n];\n\n@NgModule({\n    imports: [RouterModule.forRoot(routes)],\n    exports: [ RouterModule ]\n})\nexport class AppRoutingModule {\n    static components = [ HomeComponent ];\n}","import { Component } from '@angular/core';\n\n@Component({ \n  selector: 'app-root',\n  template: `\n    <router-outlet></router-outlet>\n  `\n})\nexport class AppComponent {\n  \n  constructor() {\n\n  }\n  \n}","import { NgModule }      from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppComponent } from './app.component';\nimport { AppRoutingModule } from './app-routing.module';\nimport { CoreModule } from './core/core.module';\n\n@NgModule({\n  imports:      [ BrowserModule, AppRoutingModule, CoreModule ],\n  declarations: [ AppComponent, AppRoutingModule.components ],\n  bootstrap:    [ AppComponent ]\n})\nexport class AppModule { }","﻿import { NgModule, Optional, SkipSelf } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { EnsureModuleLoadedOnceGuard } from './ensureModuleLoadedOnceGuard';\nimport { DataService } from './services/data.service';\n\n@NgModule({\n    imports: [ CommonModule, HttpClientModule ]\n})\nexport class CoreModule extends EnsureModuleLoadedOnceGuard {    //Ensure that CoreModule is only loaded into AppModule\n\n    //Looks for the module in the parent injector to see if it's already been loaded (only want it loaded once)\n    constructor( @Optional() @SkipSelf() parentModule: CoreModule) {\n        super(parentModule);\n    }\n}","﻿export class EnsureModuleLoadedOnceGuard {\n\n    constructor(targetModule: any) {\n        if (targetModule) {\n            throw new Error(`${targetModule.constructor.name} has already been loaded. Import this module in the AppModule only.`);\n        }\n    }\n\n}","﻿import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\r\n\r\nimport { Observable } from 'rxjs';\r\nimport { map, catchError } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class DataService {\r\n    url = '/api/messages';\r\n    constructor(private http: HttpClient) { }\r\n\r\n    getMessage() : Observable<string> {\r\n        return this.http.get<string>(this.url)\r\n            .pipe(\r\n                map(res => res['data']),\r\n                catchError(this.handleError)\r\n            );\r\n    }\r\n\r\n    private handleError(error: HttpErrorResponse) {\r\n        console.error('Server error:', error);\r\n        if (error.error instanceof Error) {\r\n            const errMessage = error.error.message;\r\n            return Observable.throw(errMessage);\r\n        }\r\n        return Observable.throw(error || 'Server error');\r\n    }\r\n}","module.exports = \"<h1>{{ message }}</h1>\"","﻿import { Component, OnInit } from '@angular/core';\r\n\r\nimport { DataService } from '../core/services/data.service';\r\n\r\n@Component({\r\n    selector: 'home',\r\n    templateUrl: './home.component.html'\r\n})\r\nexport class HomeComponent implements OnInit {\r\n\r\n    message: string;\r\n\r\n    constructor(private dataService: DataService) { }\r\n\r\n    ngOnInit() {\r\n        this.dataService.getMessage().subscribe((message: string) => {\r\n            this.message = message;\r\n        })\r\n    }\r\n}","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}